{"version":3,"file":"static/js/698.9a742657.chunk.js","mappings":"gKAYIA,E,6LACJ,IACEA,EAAW,IAAIC,EAAAA,EAA8BC,OAAOC,SAGrD,CAFC,MAAOC,GACPC,QAAQC,KAAK,yBAA0BF,EACxC,CAEc,SAASG,EAAT,GAAiF,IAA/CC,EAA8C,EAA9CA,eAAgBC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,kBACxE,GAAoCC,EAAAA,EAAAA,UAAS,CAAC,GAA9C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8CF,EAAAA,EAAAA,UAAS,IAAvD,eAAOG,EAAP,KAAwBC,EAAxB,KAEMC,EAAe,SAAAC,GACnBP,EAAkBF,EAAeU,QAAO,SAAAC,GAAC,OAAIA,EAAEC,OAASH,CAAf,IAC1C,EAED,GAA4CN,EAAAA,EAAAA,UAAS,GAArD,eAAOU,EAAP,KAAuBC,EAAvB,KAKMC,EAAa,mCAAG,oGACdvB,EAASwB,KAAK,sBAAuB,IADvB,OAEdC,EAASzB,EAAS0B,YACxBX,EAAmBU,EAAOzB,SAASA,SAAS2B,iBAHxB,2CAAH,qDAMbC,GAAkBC,EAAAA,EAAAA,cAAW,iBAAC,yFAC7BrB,EAAesB,OADc,iCAEPC,EAAAA,EAAAA,IAAYjB,GAFL,OAE1BkB,EAF0B,OAGhC3B,QAAQ4B,IAAI,CAAED,WAAAA,IAcZE,EAXGF,EAAWG,KAAKL,OAWHE,EAAWG,KAAKC,KAAI,SAAAnB,GAAO,MAAK,CAC9CG,KAAMH,EAAQG,KACdiB,SAAUpB,EAAQqB,WAAaC,EAC/BC,KAAMvB,EAAQuB,KACdC,MAAOxB,EAAQyB,MAAMC,YACrBD,MAAOzB,EAAQyB,MAL0B,IAV3B,CACd,CACEtB,KAAM,WACNiB,SAAUO,EACVJ,KAAM,wCACNC,MAAO,SACPC,MAAO,CAAC,IAadrC,QAAQ4B,IAAI,CAAED,WAAAA,EAAYE,cAAAA,IAC1BxB,EAAkBwB,GA3Bc,2CA6BjC,CAACpB,EAAiBN,EAAesB,OAAQpB,IAE5C,OACE,iCACE,gBAAKmC,UAAWC,EAAAA,EAAAA,gBAAhB,UACE,iBAAKD,UAAWC,EAAAA,EAAAA,OAAhB,WACE,iBAAMD,UAAWC,EAAAA,EAAAA,QAAiBC,QAAS,kBAAMtC,EAAQ,UAAd,EAA3C,0BAGA,gBAAKuC,IAAKC,EAAaC,IAAI,IAAIH,QAhDjB,WACpBzB,GAAkB,SAAA6B,GAAC,OAAIA,EAAI,CAAR,GACpB,UAkDG,gBAAKN,UAAWC,EAAAA,EAAAA,cAAhB,UACE,gBAAKD,UAAWC,EAAAA,EAAAA,WAAhB,SACGhC,GACC,mBAAQiC,QAASnB,EAAjB,SAAmCd,KAEnC,mBAAQiC,QAASxB,EAAjB,gCAKJvB,GAGA,+BACE,SAAC,KAAD,CAAWoD,YAAY,aAAvB,SACG,SAAAC,GAAQ,OACP,gCACER,UAAWC,EAAAA,EAAAA,QACPO,EAASC,gBAFf,IAGEC,IAAKF,EAASG,SAHhB,UAKG1C,GACCN,EAAe4B,KAAI,SAACnB,EAASwC,GAC3B,OACE,SAACC,EAAA,EAAD,CAEEzC,QAASA,EACTD,aAAcA,EACdyC,MAAOA,EACPpC,eAAgBA,EAChBT,WAAYA,EACZC,cAAeA,EACfL,eAAgBA,EAChBE,kBAAmBA,EACnBiD,OAAK,GATA1C,EAYV,IACFoC,EAASO,eAvBL,OAJb,cAAGC,MAAO,CAAEC,WAAY,IAAKC,UAAW,UAAxC,4CAmCP,C","sources":["views/FloorCheckerWithWallet.jsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { ethers } from 'ethers';\n\nimport refreshIcon from '../assets/refresh-icon-white.png';\nimport loserImage from '../assets/loser.png';\nimport Floor from '../components/Floor';\nimport { fetchMyNfts } from '../httpRequests/requests';\nimport questionMark from '../assets/question-mark.png';\n\nimport classes from '../App.module.scss';\n\nlet provider\ntry {\n  provider = new ethers.providers.Web3Provider(window.ethereum);\n} catch (e) {\n  console.warn('web3provider not found', e)\n}\n\nexport default function FloorCheckerWithWallet({ ownProjectList, setPage, setOwnProjectList }) {\n  const [isMenuOpen, setIsMenuOpen] = useState({});\n  const [connectedWallet, setConnectedWallet] = useState('');\n\n  const handleRemove = project => {\n    setOwnProjectList(ownProjectList.filter(p => p.slug !== project));\n  };\n\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const refreshFloors = () => {\n    setRefreshCounter(c => c + 1);\n  };\n\n  const connectWallet = async () => {\n    await provider.send('eth_requestAccounts', []);\n    const signer = provider.getSigner();\n    setConnectedWallet(signer.provider.provider.selectedAddress);\n  };\n\n  const fetchMyProjects = useCallback(async () => {\n    if (!ownProjectList.length) {\n      const myProjects = await fetchMyNfts(connectedWallet);\n      console.log({ myProjects })\n      \n      let myProjectList\n      if (!myProjects.data.length) {\n        myProjectList = [\n          {\n            slug: 'imaloser',\n            imageUrl: loserImage,\n            name: \"You don't own any NFTs in this wallet\",\n            floor: 'sucker',\n            stats: {}\n          }\n        ];\n      } else {\n        myProjectList = myProjects.data.map(project => ({\n          slug: project.slug,\n          imageUrl: project.image_url || questionMark,\n          name: project.name,\n          floor: project.stats.floor_price,\n          stats: project.stats,\n        }));\n      }\n\n      console.log({ myProjects, myProjectList });\n      setOwnProjectList(myProjectList)\n    }\n  }, [connectedWallet, ownProjectList.length, setOwnProjectList]);\n\n  return (\n    <>\n      <div className={classes.headerContainer}>\n        <div className={classes.header}>\n          <span className={classes.appName} onClick={() => setPage('landing')}>\n            FLOOR CHECK\n          </span>\n          <img src={refreshIcon} alt=\"O\" onClick={refreshFloors} />\n        </div>\n      </div>\n\n      <div className={classes.formContainer}>\n        <div className={classes.walletInfo}>\n          {connectedWallet ? (\n            <button onClick={fetchMyProjects}>{connectedWallet}</button>\n          ) : (\n            <button onClick={connectWallet}>Connect wallet</button>\n          )}\n        </div>\n      </div>\n\n      {!provider ? (\n        <p style={{ paddingTop: 120, textAlign: 'center' }}>you need to install metamask</p>\n      ) : (\n        <>\n          <Droppable droppableId=\"floorCards\">\n            {provided => (\n              <ul\n                className={classes.floors}\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {connectedWallet &&\n                  ownProjectList.map((project, index) => {\n                    return (\n                      <Floor\n                        key={project}\n                        project={project}\n                        handleRemove={handleRemove}\n                        index={index}\n                        refreshCounter={refreshCounter}\n                        isMenuOpen={isMenuOpen}\n                        setIsMenuOpen={setIsMenuOpen}\n                        ownProjectList={ownProjectList}\n                        setOwnProjectList={setOwnProjectList}\n                        isOwn\n                      />\n                    );\n                  })}\n                {provided.placeholder}\n              </ul>\n            )}\n          </Droppable>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["provider","ethers","window","ethereum","e","console","warn","FloorCheckerWithWallet","ownProjectList","setPage","setOwnProjectList","useState","isMenuOpen","setIsMenuOpen","connectedWallet","setConnectedWallet","handleRemove","project","filter","p","slug","refreshCounter","setRefreshCounter","connectWallet","send","signer","getSigner","selectedAddress","fetchMyProjects","useCallback","length","fetchMyNfts","myProjects","log","myProjectList","data","map","imageUrl","image_url","questionMark","name","floor","stats","floor_price","loserImage","className","classes","onClick","src","refreshIcon","alt","c","droppableId","provided","droppableProps","ref","innerRef","index","Floor","isOwn","placeholder","style","paddingTop","textAlign"],"sourceRoot":""}