{"version":3,"file":"static/js/748.eefaa5d1.chunk.js","mappings":"gKAYIA,E,0KACJ,IACEA,EAAW,IAAIC,EAAAA,EAAuBC,OAAOC,SAG/C,CAFE,MAAOC,GACPC,QAAQC,KAAK,yBAA0BF,EACzC,CAEe,SAASG,EAAuB,GAI3C,IAHFC,EAAc,EAAdA,eACAC,EAAO,EAAPA,QACAC,EAAiB,EAAjBA,kBAEA,GAAoCC,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAAzCC,EAAU,KAAEC,EAAa,KAChC,GAA8CF,EAAAA,EAAAA,UAAS,IAAG,eAAnDG,EAAe,KAAEC,EAAkB,KAEpCC,EAAe,SAAAC,GACnBP,EAAkBF,EAAeU,QAAO,SAAAC,GAAC,OAAIA,EAAEC,OAASH,CAAO,IACjE,EAEA,GAA4CN,EAAAA,EAAAA,UAAS,GAAE,eAAhDU,EAAc,KAAEC,EAAiB,KAKlCC,EAAa,yCAAG,4FACfvB,EAAS,CAAD,eACuB,OAAlCwB,MAAM,4BAA4B,0CAIbxB,EAASyB,KAAK,sBAAuB,IAAI,KAAD,EAAzDC,EAAQ,OACdrB,QAAQsB,IAAI,CAAED,SAAAA,IACdX,EAAmBW,EAAS,IAE5B,2CACD,kBAXkB,mCAabE,GAAkBC,EAAAA,EAAAA,cAAW,uBAAC,8FAC7BrB,EAAesB,OAAO,CAAD,gCACCC,EAAAA,EAAAA,IAAYjB,GAAiB,KAAD,EAA/CkB,EAAU,OAChB3B,QAAQsB,IAAI,CAAEK,WAAAA,IAcZC,EAXGD,EAAWE,KAAKJ,OAWHE,EAAWE,KAAKC,KAAI,SAAAlB,GAAO,MAAK,CAC9CG,KAAMH,EAAQG,KACdgB,SAAUnB,EAAQoB,WAAaC,EAC/BC,KAAMtB,EAAQsB,KACdC,MAAOvB,EAAQwB,MAAMC,YACrBD,MAAOxB,EAAQwB,MAChB,IAhBe,CACd,CACErB,KAAM,WACNgB,SAAUO,EACVJ,KAAM,wCACNC,MAAO,SACPC,MAAO,CAAC,IAadpC,QAAQsB,IAAI,CAAEK,WAAAA,EAAYC,cAAAA,IAC1BvB,EAAkBuB,GAAe,2CAElC,CAACnB,EAAiBN,EAAesB,OAAQpB,IAE5C,OACE,iCACE,gBAAKkC,UAAWC,EAAAA,EAAAA,gBAAwB,UACtC,iBAAKD,UAAWC,EAAAA,EAAAA,OAAe,WAC7B,iBAAMD,UAAWC,EAAAA,EAAAA,QAAiBC,QAAS,kBAAMrC,EAAQ,UAAU,EAAC,SAAC,iBAGrE,gBAAKsC,I,y+WAAkBC,IAAI,IAAIF,QAvDjB,WACpBxB,GAAkB,SAAA2B,GAAC,OAAIA,EAAI,CAAC,GAC9B,UAyDI,gBAAKL,UAAWC,EAAAA,EAAAA,cAAsB,UACpC,gBAAKD,UAAWC,EAAAA,EAAAA,WAAmB,SAChC/B,GACC,mBAAQgC,QAASlB,EAAgB,SAAEd,KAEnC,mBAAQgC,QAASvB,EAAc,SAAC,uBAKpCvB,GAKA,+BACE,SAAC,KAAS,CAACkD,YAAY,aAAY,SAChC,SAAAC,GAAQ,OACP,gCACEP,UAAWC,EAAAA,EAAAA,QACPM,EAASC,gBAAc,IAC3BC,IAAKF,EAASG,SAAS,UAEtBxC,GACCN,EAAe2B,KAAI,SAAClB,EAASsC,GAC3B,OACE,SAACC,EAAA,EAAK,CAEJvC,QAASA,EACTD,aAAcA,EACduC,MAAOA,EACPlC,eAAgBA,EAChBT,WAAYA,EACZC,cAAeA,EACfL,eAAgBA,EAChBE,kBAAmBA,EACnB+C,OAAK,GATAxC,EAYX,IACDkC,EAASO,eACP,OA9BX,cAAGC,MAAO,CAAEC,WAAY,IAAKC,UAAW,UAAW,SAAC,mCAqC5D,C","sources":["views/FloorCheckerWithWallet.jsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { ethers } from 'ethers';\n\nimport refreshIcon from '../assets/refresh-icon-white.png';\nimport loserImage from '../assets/loser.png';\nimport Floor from '../components/Floor';\nimport { fetchMyNfts } from '../httpRequests/requests';\nimport questionMark from '../assets/question-mark.png';\n\nimport classes from '../App.module.scss';\n\nlet provider;\ntry {\n  provider = new ethers.BrowserProvider(window.ethereum);\n} catch (e) {\n  console.warn('web3provider not found', e);\n}\n\nexport default function FloorCheckerWithWallet({\n  ownProjectList,\n  setPage,\n  setOwnProjectList\n}) {\n  const [isMenuOpen, setIsMenuOpen] = useState({});\n  const [connectedWallet, setConnectedWallet] = useState('');\n\n  const handleRemove = project => {\n    setOwnProjectList(ownProjectList.filter(p => p.slug !== project));\n  };\n\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const refreshFloors = () => {\n    setRefreshCounter(c => c + 1);\n  };\n\n  const connectWallet = async () => {\n    if (!provider) {\n      alert('Install Metamask, please');\n      return;\n    }\n    // 'eth_requestAccounts' returns an array with one element (always one, LOL)\n    const accounts = await provider.send('eth_requestAccounts', []);\n    console.log({ accounts });\n    setConnectedWallet(accounts[0]);\n    // const signer = provider.getSigner();\n    // setConnectedWallet(signer.provider.provider.selectedAddress);\n  };\n\n  const fetchMyProjects = useCallback(async () => {\n    if (!ownProjectList.length) {\n      const myProjects = await fetchMyNfts(connectedWallet);\n      console.log({ myProjects });\n\n      let myProjectList;\n      if (!myProjects.data.length) {\n        myProjectList = [\n          {\n            slug: 'imaloser',\n            imageUrl: loserImage,\n            name: \"You don't own any NFTs in this wallet\",\n            floor: 'sucker',\n            stats: {}\n          }\n        ];\n      } else {\n        myProjectList = myProjects.data.map(project => ({\n          slug: project.slug,\n          imageUrl: project.image_url || questionMark,\n          name: project.name,\n          floor: project.stats.floor_price,\n          stats: project.stats\n        }));\n      }\n\n      console.log({ myProjects, myProjectList });\n      setOwnProjectList(myProjectList);\n    }\n  }, [connectedWallet, ownProjectList.length, setOwnProjectList]);\n\n  return (\n    <>\n      <div className={classes.headerContainer}>\n        <div className={classes.header}>\n          <span className={classes.appName} onClick={() => setPage('landing')}>\n            FLOOR CHECK\n          </span>\n          <img src={refreshIcon} alt=\"O\" onClick={refreshFloors} />\n        </div>\n      </div>\n\n      <div className={classes.formContainer}>\n        <div className={classes.walletInfo}>\n          {connectedWallet ? (\n            <button onClick={fetchMyProjects}>{connectedWallet}</button>\n          ) : (\n            <button onClick={connectWallet}>Connect wallet</button>\n          )}\n        </div>\n      </div>\n\n      {!provider ? (\n        <p style={{ paddingTop: 120, textAlign: 'center' }}>\n          you need to install metamask\n        </p>\n      ) : (\n        <>\n          <Droppable droppableId=\"floorCards\">\n            {provided => (\n              <ul\n                className={classes.floors}\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {connectedWallet &&\n                  ownProjectList.map((project, index) => {\n                    return (\n                      <Floor\n                        key={project}\n                        project={project}\n                        handleRemove={handleRemove}\n                        index={index}\n                        refreshCounter={refreshCounter}\n                        isMenuOpen={isMenuOpen}\n                        setIsMenuOpen={setIsMenuOpen}\n                        ownProjectList={ownProjectList}\n                        setOwnProjectList={setOwnProjectList}\n                        isOwn\n                      />\n                    );\n                  })}\n                {provided.placeholder}\n              </ul>\n            )}\n          </Droppable>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["provider","ethers","window","ethereum","e","console","warn","FloorCheckerWithWallet","ownProjectList","setPage","setOwnProjectList","useState","isMenuOpen","setIsMenuOpen","connectedWallet","setConnectedWallet","handleRemove","project","filter","p","slug","refreshCounter","setRefreshCounter","connectWallet","alert","send","accounts","log","fetchMyProjects","useCallback","length","fetchMyNfts","myProjects","myProjectList","data","map","imageUrl","image_url","questionMark","name","floor","stats","floor_price","loserImage","className","classes","onClick","src","alt","c","droppableId","provided","droppableProps","ref","innerRef","index","Floor","isOwn","placeholder","style","paddingTop","textAlign"],"sourceRoot":""}