{"version":3,"file":"static/js/401.05375d90.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/providers/src.ts/web3-provider.ts","views/FloorCheckerWithWallet.jsx"],"sourcesContent":["\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n","import React, { useCallback, useState } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { ethers } from 'ethers';\n\nimport refreshIcon from '../assets/refresh-icon-white.png';\nimport loserImage from '../assets/loser.png';\nimport Floor from '../components/Floor';\nimport { fetchMyNfts } from '../httpRequests/requests';\nimport questionMark from '../assets/question-mark.png';\n\nimport classes from '../App.module.scss';\n\nlet provider\ntry {\n  provider = new ethers.providers.Web3Provider(window.ethereum);\n} catch (e) {\n  console.warn('web3provider not found', e)\n}\n\nexport default function FloorCheckerWithWallet({ ownProjectList, setPage, setOwnProjectList }) {\n  const [isMenuOpen, setIsMenuOpen] = useState({});\n  const [connectedWallet, setConnectedWallet] = useState('');\n\n  const handleRemove = project => {\n    setOwnProjectList(ownProjectList.filter(p => p.slug !== project));\n  };\n\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const refreshFloors = () => {\n    setRefreshCounter(c => c + 1);\n  };\n\n  const connectWallet = async () => {\n    if (!provider) {\n      alert('Install Metamask, please')\n      return\n    }\n    // 'eth_requestAccounts' returns an array with one element (always one, LOL)\n    const accounts = await provider.send('eth_requestAccounts', []);\n    console.log({ accounts });\n    setConnectedWallet(accounts[0])\n    // const signer = provider.getSigner();\n    // setConnectedWallet(signer.provider.provider.selectedAddress);\n  };\n\n  const fetchMyProjects = useCallback(async () => {\n    if (!ownProjectList.length) {\n      const myProjects = await fetchMyNfts(connectedWallet);\n      console.log({ myProjects })\n      \n      let myProjectList\n      if (!myProjects.data.length) {\n        myProjectList = [\n          {\n            slug: 'imaloser',\n            imageUrl: loserImage,\n            name: \"You don't own any NFTs in this wallet\",\n            floor: 'sucker',\n            stats: {}\n          }\n        ];\n      } else {\n        myProjectList = myProjects.data.map(project => ({\n          slug: project.slug,\n          imageUrl: project.image_url || questionMark,\n          name: project.name,\n          floor: project.stats.floor_price,\n          stats: project.stats,\n        }));\n      }\n\n      console.log({ myProjects, myProjectList });\n      setOwnProjectList(myProjectList)\n    }\n  }, [connectedWallet, ownProjectList.length, setOwnProjectList]);\n\n  return (\n    <>\n      <div className={classes.headerContainer}>\n        <div className={classes.header}>\n          <span className={classes.appName} onClick={() => setPage('landing')}>\n            FLOOR CHECK\n          </span>\n          <img src={refreshIcon} alt=\"O\" onClick={refreshFloors} />\n        </div>\n      </div>\n\n      <div className={classes.formContainer}>\n        <div className={classes.walletInfo}>\n          {connectedWallet ? (\n            <button onClick={fetchMyProjects}>{connectedWallet}</button>\n          ) : (\n            <button onClick={connectWallet}>Connect wallet</button>\n          )}\n        </div>\n      </div>\n\n      {!provider ? (\n        <p style={{ paddingTop: 120, textAlign: 'center' }}>you need to install metamask</p>\n      ) : (\n        <>\n          <Droppable droppableId=\"floorCards\">\n            {provided => (\n              <ul\n                className={classes.floors}\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {connectedWallet &&\n                  ownProjectList.map((project, index) => {\n                    return (\n                      <Floor\n                        key={project}\n                        project={project}\n                        handleRemove={handleRemove}\n                        index={index}\n                        refreshCounter={refreshCounter}\n                        isMenuOpen={isMenuOpen}\n                        setIsMenuOpen={setIsMenuOpen}\n                        ownProjectList={ownProjectList}\n                        setOwnProjectList={setOwnProjectList}\n                        isOwn\n                      />\n                    );\n                  })}\n                {provided.placeholder}\n              </ul>\n            )}\n          </Droppable>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["logger","Logger","version","_nextId","buildWeb3LegacyFetcher","provider","sendFunc","fetcher","method","params","request","id","jsonrpc","Promise","resolve","reject","emit","action","deepCopy","error","response","Error","message","code","data","result","Web3Provider","network","throwArgumentError","path","jsonRpcFetchFunc","subprovider","host","isMetaMask","this","then","buildEip1193Fetcher","sendAsync","bind","send","defineReadOnly","JsonRpcProvider","ethers","window","ethereum","e","console","warn","FloorCheckerWithWallet","ownProjectList","setPage","setOwnProjectList","useState","isMenuOpen","setIsMenuOpen","connectedWallet","setConnectedWallet","handleRemove","project","filter","p","slug","refreshCounter","setRefreshCounter","connectWallet","alert","accounts","log","fetchMyProjects","useCallback","length","fetchMyNfts","myProjects","myProjectList","map","imageUrl","image_url","questionMark","name","floor","stats","floor_price","loserImage","className","classes","onClick","src","alt","c","droppableId","provided","droppableProps","ref","innerRef","index","Floor","isOwn","placeholder","style","paddingTop","textAlign"],"sourceRoot":""}